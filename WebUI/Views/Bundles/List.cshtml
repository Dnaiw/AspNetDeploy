@using AspNetDeploy.WebUI.Models
@using Environment = AspNetDeploy.Model.Environment
@{
    ViewBag.Title = "Index";
    ViewBag.PageClass = "bundlesPage";
    Layout = "~/Views/Shared/_Layout.cshtml";

}

<div class="container">


    @foreach (BundleInfo bundleInfo in this.ViewBag.Bundles)
    {
        <div class="box bundle">
            <h1>
                @Html.ActionLink(bundleInfo.Bundle.Name, "Details", new { id = bundleInfo.Bundle.Id })
            </h1>
            @foreach (BundleVersionInfo bundleVersionInfo in bundleInfo.BundleVersionsInfo)
            {
                bool isFeature = bundleVersionInfo.BundleVersion.GetBoolProperty("IsFeature");



                <div id="@("idBundleVersionProgress" + bundleVersionInfo.BundleVersion.Id)" class="progress mb-3" style="display: none; height: 7px;">
                    <div class="progress-bar bg-success" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: 40%">
                        <span class="sr-only"></span>
                    </div>
                </div>

                <div class="row">
                    <div class="col d-flex flex-column" style="justify-content: center">

                        <h2>
                            @Html.ActionLink(bundleVersionInfo.BundleVersion.Name, "VersionPackages", new { id = bundleVersionInfo.BundleVersion.Id })

                            @if (bundleVersionInfo.BundleVersion.IsHead)
                            {
                                <span class="badge rounded-pill text-bg-secondary">Head</span>
                            }

                            @if (isFeature)
                            {
                                <span class="badge rounded-pill text-bg-secondary">Feature</span>
                            }

                            @*
                                @if (bundleVersionInfo.BundleVersion.GetIntProperty("AutoDeployToEnvironment") > 0)
                                {
                                    <span class="badge rounded-pill text-bg-secondary">Auto deploy to @bundleVersionInfo.Environments.Where(e => e.Id == bundleVersionInfo.BundleVersion.GetIntProperty("AutoDeployToEnvironment")).Select(e => e.Name).FirstOrDefault()</span>
                                }
                            *@

                            <span id="@("idBundleVersionState" + bundleVersionInfo.BundleVersion.Id)">
                                <img class="loadingIcon" src="~/Resources/Layout/Images/vs-loading-colored.gif" style="display: none;" />
                                <small class="status" style="display: none;"></small>
                            </span>

                        </h2>

                        @if (bundleVersionInfo.ProjectsVersionsInfo.Count == 0)
                        {
                            <a href="@Url.Action("AddStep", "BundleVersionDeployment", new { id = bundleVersionInfo.BundleVersion.Id, deploymentStepType = DeploymentStepType.DeployWebSite })">Add project</a>
                        }
                        else
                        {
                            foreach (ProjectVersionInfo projectVersionInfo in bundleVersionInfo.ProjectsVersionsInfo)
                            {
                                ProjectVersion projectVersion = projectVersionInfo.ProjectVersion;
                                SourceControlVersion sourceControlVersion = projectVersionInfo.SourceControlVersion;
                                SourceControl sourceControl = projectVersionInfo.SourceControl;
                                bool isArchived = sourceControlVersion.ArchiveState != SourceControlVersionArchiveState.Normal;
                                string stringProperty = projectVersion.GetStringProperty("LastBuildResult", null);


                                <div>
                                    <small class="@(isArchived ? "text-muted" : "")">
                                        @sourceControl.Name / @sourceControlVersion.Name / @projectVersion.Name

                                        @if (isArchived)
                                        {
                                            <span>(archived)</span>
                                        }

                                        <span id="@("idProjectVersionState" + projectVersion.Id)">
                                            <img class="loadingIcon" src="~/Resources/Layout/Images/vs-loading-colored.gif" style="display: none;" />
                                            <span class="status text-muted @(stringProperty != null && stringProperty == "Error" ? "error" : "")">@(stringProperty != null && stringProperty == "Error" ? "Build error" : "")</span>
                                        </span>
                                    </small>
                                </div>
                            }
                        }

                    </div>

                    <div class="col text-center">
                        <div class="row">
                            @foreach (Environment environment in bundleVersionInfo.Environments)
                            {
                                bool isTest = environment.GetBoolProperty("AllowTestDeployment", true);

                                if (isFeature && !isTest)
                                {
                                    continue;
                                }

                                <div class="col-lg-4">
                                    <div>
                                        @environment.Name
                                    </div>
                                    <div>
                                        @if (!bundleVersionInfo.Publications.ContainsKey(environment.Id))
                                        {
                                            <div style="padding: 20px;">
                                                <img src="~/Resources/Layout/Images/Icons/box-empty64.png" />
                                            </div>
                                        }
                                        else
                                        {
                                            IEnumerable<Publication> publications = bundleVersionInfo.Publications[environment.Id];
                                            Publication publication = publications.OrderByDescending(p => p.CreatedDate).FirstOrDefault();


                                            if (publication == null)
                                            {
                                                <div style="padding: 20px;">
                                                    <img src="~/Resources/Layout/Images/Icons/box-empty64.png" />
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="position-relative" style="padding: 8px;">
                                                    <img src="~/Resources/Layout/Images/Icons/package64.png" />
                                                </div>

                                                <div class="text-nowrap">

                                                    @switch (publication.State)
                                                    {
                                                        case PublicationState.Complete:
                                                            <span class="badge rounded-pill text-bg-success">OK</span>
                                                            break;
                                                        case PublicationState.Error:
                                                            <span class="badge rounded-pill text-bg-danger">Error</span>
                                                            break;
                                                        case PublicationState.InProgress:
                                                            <span class="badge rounded-pill text-bg-info">Deplying</span>
                                                            break;
                                                        case PublicationState.Queued:
                                                            <span class="badge rounded-pill text-bg-info">Queued</span>
                                                            break;
                                                    }

                                                    <span class="badge rounded-pill text-bg-dark">pack.@publication.PackageId</span>
                                                </div>

                                                <div class="text-nowrap">
                                                    <small class="text-muted">@publication.CreatedDate.ToLocalTime().ToString("d MMMM yyyy")</small>
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>


                            }

                        </div>
                    </div>
                </div>

                <br />

            }

        </div>

    }

</div>

<script>

    $(function ()
    {
        function updateStatuses()
        {
            var bundleStates =
            {
                "Idle": {
                    loadingIcon: false,
                    text: ''
                },
                "LoadingQueued": {
                    loadingIcon: false,
                    text: 'Loading queued'
                },
                "Loading": {
                    loadingIcon: true,
                    text: 'Loading'
                },
                "BuildQueued": {
                    loadingIcon: false,
                    text: 'Building queued'
                },
                "Building": {
                    loadingIcon: true,
                    text: 'Building'
                },
                "TestingQueued": {
                    loadingIcon: false,
                    text: 'Testing queued'
                },
                "Testing": {
                    loadingIcon: true,
                    text: 'Testing'
                },
                "PackagingQueued": {
                    loadingIcon: false,
                    text: 'Packaging queued'
                },
                "Packaging": {
                    loadingIcon: true,
                    text: 'Packaging'
                },
                "DeployingQueued": {
                    loadingIcon: false,
                    text: 'Deploying queued'
                },
                "Deploying": {
                    loadingIcon: true,
                    text: 'Deploying'
                }
            }

            var projectStates =
            {
                "Idle": {
                    loadingIcon: false,
                    text: ''
                },
                "QueuedToBuild": {
                    loadingIcon: false,
                    text: 'Build queued'
                },
                "Building": {
                    loadingIcon: true,
                    text: 'Building'
                },
                "Stopping": {
                    loadingIcon: true,
                    text: 'Stopping'
                },
                "Error": {
                    loadingIcon: false,
                    css: 'error',
                    text: 'Error'
                }
            }

            function updateStatus(element, newState)
            {
                var loadingIcon = element.find('.loadingIcon');
                var statusBox = element.find('.status');

                if (newState.text == statusBox.data('text'))
                {
                    return;
                }

                statusBox.attr('class', 'status text-muted ' + newState.css);
                statusBox.data('text', newState.text);

                loadingIcon[newState.loadingIcon ? 'fadeIn' : 'fadeOut']();
                statusBox[newState.text ? 'fadeIn' : 'fadeOut']();

                if (newState.text)
                {
                    statusBox.text(newState.text);
                }
            }

            function updateProgress(element, elapsedSecs, totalSecs)
            {
                if (totalSecs == 0)
                {
                    element.fadeOut();
                }
                else
                {
                    var progress = element.find('.progress-bar');
                    progress.width((elapsedSecs * 100 / totalSecs) + '%');
                    element.fadeIn();
                }
            }

            $.post('@Url.Action("GetBundleStates")').success(function (data)
            {
                for (var i = 0; i < data.length; i++)
                {
                    var item = data[i];
                    var bundleState = bundleStates[item.state];

                    if (bundleState)
                    {
                        updateStatus($("#idBundleVersionState" + item.id), bundleState);
                    }

                    updateProgress($("#idBundleVersionProgress" + item.id), item.elapsedSecs, item.totalSecs);

                    for (var j = 0; j < item.projects.length; j++)
                    {
                        var project = item.projects[j];
                        updateStatus($("#idProjectVersionState" + project.id), projectStates[project.state]);
                    }
                }

            });
        }

        updateStatuses();
        setInterval(updateStatuses, 3000);

    });

</script>
