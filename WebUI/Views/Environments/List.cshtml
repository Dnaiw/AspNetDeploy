@using AspNetDeploy.Contracts
@using Environment = AspNetDeploy.Model.Environment

@{
    ViewBag.Title = "Index";
    ViewBag.PageClass = "environmentsPage";
    Layout = "~/Views/Shared/_Layout.cshtml";

    IDictionary<Machine, SatelliteState> machineStates = this.ViewBag.MachineStates;
}

<div class="container">

    @foreach (Environment environment in this.ViewBag.Environments)
    {
        <h1> @Html.ActionLink(environment.Name, "Details", new { id = environment.Id }) </h1>
        <hr />

        foreach (Machine machine in environment.Machines)
        {
            <div class="row machine">
                <div class="col-sm-8 col-md-4">
                    <div class="name">
                        <div class="roles pull-right">
                            @foreach (MachineRole role in machine.MachineRoles)
                            {
                                <span class="label label-default">@role.Name</span>
                            }
                        </div>
                        <div>
                            @switch (machineStates[machine])
                            {
                                case SatelliteState.Alive:
                                    <img src="~/Resources/Layout/Images/Icons/server-ok32.png" />
                                    break;

                                case SatelliteState.UnableToEstablishSecureConnection:
                                    <img src="~/Resources/Layout/Images/Icons/server-warning32.png" />
                                    break;
                                    
                                @*
                                    <img src="~/Resources/Layout/Images/Icons/server-problem32.png" />
                                    break;*@

                                case SatelliteState.Inactive:
                                case SatelliteState.NotConfigured:
                                default:
                                    <img src="~/Resources/Layout/Images/Icons/server32.png" />
                                    break;
                            }
                            
                            
                            @machine.Name
                            <span id="@("idMachine" + machine.Id)">
                                <img class="loadingIcon" src="~/Resources/Layout/Images/vs-loading-colored.gif" style="display: none;" />
                                <small class="status text-muted" style="display: none;"></small>
                            </span>
                            
                            
                        </div>
                        
                    </div>
                    
                </div>
                <div class="col-sm-6">
                    @if (machineStates[machine] == SatelliteState.UnableToEstablishSecureConnection)
                    {
                        <div><small>Unable to establish secure connection: check credentials, server time and and port ssl binding</small></div>
                    }
                    
                    @if (machineStates[machine] == SatelliteState.Inactive)
                    {
                        <div><small>Unable to connect to server: check URL, Satellite agent, firewall settings and port ssl binding</small></div>
                    }
                    
                    @if (machineStates[machine] == SatelliteState.NotConfigured)
                    {
                        <div><small>Server is not configured: check URL and credentials</small></div>
                    }
                </div>
            </div>
        }
        <br/>
    }

</div>

<script>

    $(function ()
    {
        function updateStatuses()
        {
            var machineStates =
            {
                "Idle": {
                    loadingIcon: false,
                    text: ''
                },
                "DeployingQueued": {
                    loadingIcon: false,
                    text: 'Deploying queued'
                },
                "Deploying": {
                    loadingIcon: true,
                    text: 'Deploying'
                },
                "Uploading": {
                    loadingIcon: true,
                    text: 'Uploading'
                },
                "Installing": {
                    loadingIcon: false,
                    text: 'Installing'
                },
                "Finalizing": {
                    loadingIcon: false,
                    text: 'Finalizing'
                },
                "Error": {
                    loadingIcon: false,
                    text: 'Error'
                }
            }

            function updateStatus(element, newState)
            {
                var loadingIcon = element.find('.loadingIcon');
                var statusBox = element.find('.status');

                if (newState.text == statusBox.data('text'))
                {
                    return;
                }

                statusBox.data('text', newState.text);

                loadingIcon[newState.loadingIcon ? 'fadeIn' : 'fadeOut']();
                statusBox[newState.text ? 'fadeIn' : 'fadeOut']();

                if (newState.text)
                {
                    statusBox.text(newState.text);
                }
            }

            $.post('@Url.Action("GetMachineStates")').success(function (data)
            {
                for (var i = 0; i < data.length; i++)
                {
                    var item = data[i];
                    updateStatus($("#idMachine" + item.id), machineStates[item.state]);
                }

            });
        }

        updateStatuses();
        setInterval(updateStatuses, 3000);

    });

</script>




