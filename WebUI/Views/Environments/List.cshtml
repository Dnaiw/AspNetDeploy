@using AspNetDeploy.Contracts
@using AspNetDeploy.Contracts.MachineSummary
@using Environment = AspNetDeploy.Model.Environment

@{
    ViewBag.Title = "Index";
    ViewBag.PageClass = "environmentsPage";
    Layout = "~/Views/Shared/_Layout.cshtml";

    IDictionary<Machine, SatelliteState> machineStates = this.ViewBag.MachineStates;
    IDictionary<Machine, IServerSummary> machineSummaries = this.ViewBag.MachineSummaries;
}

<div class="container">

    @foreach (Environment environment in ((IList<Environment>)this.ViewBag.Environments))
    {
        <h1> @Html.ActionLink(environment.Name, "Details", new { id = environment.Id }) </h1>
        <hr />

        foreach (Machine machine in environment.Machines)
        {
            IServerSummary machineSummary = machineSummaries[machine];
            
            <div class="row machine">
                <div class="col-sm-6 col-md-4">
                    <div class="name">
                        <div class="roles pull-right">
                            @foreach (MachineRole role in machine.MachineRoles)
                            {
                                <span class="label label-default">@role.Name</span>
                            }
                        </div>
                        <div>
                            @switch (machineStates[machine])
                            {
                                case SatelliteState.Alive:
                                    <img src="~/Resources/Layout/Images/Icons/server-ok32.png" />
                                    break;

                                case SatelliteState.UnableToEstablishSecureConnection:
                                    <img src="~/Resources/Layout/Images/Icons/server-warning32.png" />
                                    break;
                                    
                                @*
                                    <img src="~/Resources/Layout/Images/Icons/server-problem32.png" />
                                    break;*@

                                case SatelliteState.Inactive:
                                case SatelliteState.NotConfigured:
                                default:
                                    <img src="~/Resources/Layout/Images/Icons/server32.png" />
                                    break;
                            }
                            
                            
                            @machine.Name
                            <span id="@("idMachine" + machine.Id)">
                                <img class="loadingIcon" src="~/Resources/Layout/Images/vs-loading-colored.gif" style="display: none;" />
                                <small class="status text-muted" style="display: none;"></small>
                            </span>
                            
                            
                        </div>
                        
                    </div>
                    
                </div>
                <div class="col-sm-6 col-md-8">
                    @if (machineStates[machine] == SatelliteState.UnableToEstablishSecureConnection)
                    {
                        <div><small>Unable to establish secure connection: check credentials, server time and and port ssl binding</small></div>
                    }

                    @if (machineStates[machine] == SatelliteState.Inactive)
                    {
                        <div><small>Unable to connect to server: check URL, Satellite agent, firewall settings and port ssl binding</small></div>
                    }

                    @if (machineStates[machine] == SatelliteState.NotConfigured)
                    {
                        <div><small>Server is not configured: check URL and credentials</small></div>
                    }

                    @if (machineSummary != null)
                    {
                        double freeRamGb = Math.Round(machineSummary.AvailableMemoryMB / 1024, 1);
                        double totalRamGb = Math.Round(machineSummary.TotalMemoryMB / 1024, 1);

                        string ramProgressStyle = "progress-bar-success";

                        if (freeRamGb < 2)
                        {
                            ramProgressStyle = "progress-bar-warning";
                        }


                        <div class="row">
                            <div class="col-sm-3 ">
                                <small style="display:inline-block; width: 100%; line-height: 10px;"><span class="pull-left">Memory</span> <span class="text-muted pull-right">@freeRamGb of @totalRamGb Gb free</span></small>
                                <div class="progress" style="height: 7px; margin-bottom: 4px">
                                    <div class="progress-bar @ramProgressStyle" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: @(Math.Round((machineSummary.TotalMemoryMB - machineSummary.AvailableMemoryMB) / machineSummary.TotalMemoryMB * 100))%">
                                        <span class="sr-only"></span>
                                    </div>
                                </div>
                            </div>

                            @foreach (IDriveInfo driveInfo in machineSummary.Drives)
                            {
                                double freeSpaceGb = Math.Round(driveInfo.FreeSpaceMB / 1024, 1);
                                string driveProgressStyle = "progress-bar-success";

                                if (freeSpaceGb < 10)
                                {
                                    driveProgressStyle = "progress-bar-warning";
                                }
                                else if (freeSpaceGb < 5)
                                {
                                    driveProgressStyle = "progress-bar-danger";
                                }
                                <div class="col-sm-3">
                                    <small style="display:inline-block; width: 100%; line-height: 10px;"><span class="pull-left">@driveInfo.Name</span> <span class="text-muted pull-right">@freeSpaceGb Gb free</span></small>
                                    <div class="progress" style="height: 7px; margin-bottom: 4px">
                                        <div class="progress-bar @driveProgressStyle" role="progressbar" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: @(Math.Round((driveInfo.TotalSpaceMB - driveInfo.FreeSpaceMB) / driveInfo.TotalSpaceMB * 100))%">
                                            <span class="sr-only"></span>
                                        </div>
                                    </div>
                                </div>
                            }

                        </div>


                    }
                </div>
            </div>
        }
        <br/>
    }

</div>

<script>

    $(function ()
    {
        function updateStatuses()
        {
            var machineStates =
            {
                "Idle": {
                    loadingIcon: false,
                    text: ''
                },
                "DeployingQueued": {
                    loadingIcon: false,
                    text: 'Deploying queued'
                },
                "Deploying": {
                    loadingIcon: true,
                    text: 'Deploying'
                },
                "Uploading": {
                    loadingIcon: true,
                    text: 'Uploading'
                },
                "Installing": {
                    loadingIcon: false,
                    text: 'Installing'
                },
                "Finalizing": {
                    loadingIcon: false,
                    text: 'Finalizing'
                },
                "Error": {
                    loadingIcon: false,
                    text: 'Error'
                }
            }

            function updateStatus(element, newState)
            {
                var loadingIcon = element.find('.loadingIcon');
                var statusBox = element.find('.status');

                if (newState.text == statusBox.data('text'))
                {
                    return;
                }

                statusBox.data('text', newState.text);

                loadingIcon[newState.loadingIcon ? 'fadeIn' : 'fadeOut']();
                statusBox[newState.text ? 'fadeIn' : 'fadeOut']();

                if (newState.text)
                {
                    statusBox.text(newState.text);
                }
            }

            $.post('@Url.Action("GetMachineStates")').success(function (data)
            {
                for (var i = 0; i < data.length; i++)
                {
                    var item = data[i];
                    updateStatus($("#idMachine" + item.id), machineStates[item.state]);
                }

            });
        }

        updateStatuses();
        setInterval(updateStatuses, 3000);

    });

</script>




